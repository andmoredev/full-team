name: Deploy

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  deploy-ecr:
    name: Deploy ECR Repositories
    outputs:
      ecr_uri: ${{ steps.get_outputs.outputs.ecr_uri }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.PIPELINE_EXECUTION_ROLE }}

      - name: Validate template
        working-directory: backend
        run: |
          sam validate -t template-ecr.yaml

      - name: Deploy ECR stack
        working-directory: backend
        run: |
            sam build \
              --template-file template-ecr.yaml \
              --config-file samconfig-ecr.yaml \
              --config-env dev

            sam deploy \
              --template-file template-ecr.yaml \
              --config-file samconfig-ecr.yaml \
              --config-env dev \
              --s3-bucket "${{ secrets.ARTIFACTS_BUCKET_NAME }}" \
              --role-arn "${{ secrets.CLOUDFORMATION_EXECUTION_ROLE }}" \
              --no-fail-on-empty-changeset

      - name: Get Stack Outputs
        working-directory: backend
        id: get_outputs
        run: |
            sam list stack-outputs \
              --config-file samconfig-ecr.yaml \
              --config-env dev \
              > sam_deploy.json
            ECR_URI=$(jq -r '.[] | select(.OutputKey=="BoilerplateAgentEcrRepositoryUri") | .OutputValue' sam_deploy.json)
            echo "ecr_uri=$ECR_URI" >> $GITHUB_OUTPUT
            echo "ECR URI: $ECR_URI" >> $GITHUB_STEP_SUMMARY

  build-and-push-image:
      name: Build & Push Boilerplate Agent Image
      needs: deploy-ecr
      runs-on: ubuntu-24.04-arm
      permissions:
        id-token: write
        contents: read
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Configure AWS
          uses: aws-actions/configure-aws-credentials@v5
          with:
            aws-region: us-east-1
            role-to-assume: ${{ secrets.PIPELINE_EXECUTION_ROLE }}

        - name: Derive repository and region
          id: derive
          run: |
            ECR_URI='${{ needs.deploy-ecr.outputs.ecr_uri }}'
            if [ -z "$ECR_URI" ]; then
              echo "Missing ECR URI from previous job" >&2
              exit 1
            fi
            ACCOUNT_ID=$(echo "$ECR_URI" | awk -F'.' '{print $1}')
            REGION=$(echo "$ECR_URI" | awk -F'.' '{print $4}')
            REPO_NAME=$(echo "$ECR_URI" | awk -F'/' '{print $2}')
            echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
            echo "region=$REGION" >> $GITHUB_OUTPUT
            echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
            echo "Using repo $REPO_NAME in $REGION (account $ACCOUNT_ID)" >> $GITHUB_STEP_SUMMARY

        - name: Log in to ECR
          run: |
            aws ecr get-login-password --region ${{ steps.derive.outputs.region }} | docker login --username AWS --password-stdin ${{ steps.derive.outputs.account_id }}.dkr.ecr.${{ steps.derive.outputs.region }}.amazonaws.com

        - name: Build Image
          working-directory: backend/src/agents/boilerplate
          id: build
          run: |
            IMAGE_TAG=latest
            docker build -t ${{ steps.derive.outputs.repo_name }}:$IMAGE_TAG .
            docker tag ${{ steps.derive.outputs.repo_name }}:$IMAGE_TAG ${{ steps.derive.outputs.account_id }}.dkr.ecr.${{ steps.derive.outputs.region }}.amazonaws.com/${{ steps.derive.outputs.repo_name }}:$IMAGE_TAG
            SHORT_SHA=${GITHUB_SHA::12}
            docker tag ${{ steps.derive.outputs.repo_name }}:$IMAGE_TAG ${{ steps.derive.outputs.account_id }}.dkr.ecr.${{ steps.derive.outputs.region }}.amazonaws.com/${{ steps.derive.outputs.repo_name }}:$SHORT_SHA
            echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
            echo "Built tags: $IMAGE_TAG and $SHORT_SHA" >> $GITHUB_STEP_SUMMARY

        - name: Push Image
          id: push
          run: |
            SHORT_SHA='${{ steps.build.outputs.short_sha }}'
            docker push ${{ steps.derive.outputs.account_id }}.dkr.ecr.${{ steps.derive.outputs.region }}.amazonaws.com/${{ steps.derive.outputs.repo_name }}:latest
            docker push ${{ steps.derive.outputs.account_id }}.dkr.ecr.${{ steps.derive.outputs.region }}.amazonaws.com/${{ steps.derive.outputs.repo_name }}:$SHORT_SHA || true
            echo "latest_image=${{ steps.derive.outputs.account_id }}.dkr.ecr.${{ steps.derive.outputs.region }}.amazonaws.com/${{ steps.derive.outputs.repo_name }}:latest" >> $GITHUB_OUTPUT
            echo "sha_image=${{ steps.derive.outputs.account_id }}.dkr.ecr.${{ steps.derive.outputs.region }}.amazonaws.com/${{ steps.derive.outputs.repo_name }}:$SHORT_SHA" >> $GITHUB_OUTPUT
            echo "Pushed latest and $SHORT_SHA" >> $GITHUB_STEP_SUMMARY

  deploy-runtime:
    name: Deploy AgentCore Runtime
    needs: [deploy-ecr, build-and-push-image]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.PIPELINE_EXECUTION_ROLE }}

      - name: Derive Image URI
        id: image
        run: |
          ECR_URI='${{ needs.deploy-ecr.outputs.ecr_uri }}'
          IMAGE_TAG=latest
          if [ -z "$ECR_URI" ]; then
            echo "ECR URI missing" >&2; exit 1; fi
          FULL_URI="$ECR_URI:$IMAGE_TAG"
          echo "container_uri=$FULL_URI" >> $GITHUB_OUTPUT
          echo "Using container image: $FULL_URI" >> $GITHUB_STEP_SUMMARY

      # Skip Validate since sam version to 1.144.0 does not support AWS::BedrockAgentCore::Runtime
      # - name: Validate runtime template
      #   working-directory: backend
      #   run: |
      #     sam validate -t template.yaml

      - name: Deploy runtime stack
        working-directory: backend
        run: |
          sam build --template-file template.yaml
          sam deploy \
            --template-file template.yaml \
            --config-env dev \
            --s3-bucket "${{ secrets.ARTIFACTS_BUCKET_NAME }}" \
            --role-arn "${{ secrets.CLOUDFORMATION_EXECUTION_ROLE }}" \
            --parameter-overrides ContainerUri=${{ steps.image.outputs.container_uri }} \
            --no-fail-on-empty-changeset